#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
/*접근법
좌표를 y좌표가 증하는 순으로, y좌표가 같으면
x좌표가 증가하는 순서로 정렬한 다음 출력하는
프로그램을 작성하시오.
N(1 <= N <= 100000) 좌표는 항상 정수이고, 위치가 같은 두 점은 없다.

좌표에는 x, y 원소가 있기 때문에 2개씩 비교하려면 구조체에
멤버로 x, y를 사용하게 하여 구조체 배열로 각 구조체들을 비교하는 것이 쉽운 방법이라고 생각한다.
qsort()를 사용하여 정렬을 할 것이기 때문에 compare()를 잘 조정하여 y좌표가 증가하는 순으로, y좌표가 같으면
x 좌표가 증가하는 순서로 정렬하게끔 만들어주면 끝이다.
*/
typedef struct{
	int x;
	int y;
}Coordinate;

int compare(const void* A, const void* B) {
	Coordinate* coor1 = (Coordinate*)A;
	Coordinate* coor2 = (Coordinate*)B;
     if (coor1->y < coor2->y) return -1;  // 다음 순서 구조체의 y가 더 크다면(FALSE) - 넘어감
	else if (coor1->y > coor2->y) return 1; // 다음 순서 구조체의 y가 작다면(TRUE) - 정렬
	else {                                  // 비교하는 구조체 두 개의 원소인 y가 같다면(x를 비교)
		 if (coor1->x < coor2->x) return -1;  // 다음 순서 구조체의 x가 더 크다면(FALSE) - 넘어감
		 else return 1;                       // 다음 순서 구조체의 x가 더 작다면(TRUE) - 정렬
	 }
}

int main()
{
	int testCase;
	scanf("%d", &testCase);
	Coordinate* pos = malloc(sizeof(Coordinate) * testCase);
	for (int i = 0; i < testCase; i++){
		scanf("%d %d", &pos[i].x, &pos[i].y);
	}
	qsort(pos, testCase, sizeof(Coordinate), compare);
	for (int i = 0; i < testCase; i++) {
		printf("%d %d\n", pos[i].x, pos[i].y);
	}
	return 0;
}
